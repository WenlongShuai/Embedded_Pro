<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\atk_f407.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\atk_f407.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Aug 01 00:32:25 2025
<BR><P>
<H3>Maximum Stack Usage =        760 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; demo_run &rArr; demo_config_device &rArr; VL53L1_WaitDeviceBooted &rArr; VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[91]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[32]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[61]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[60]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[62]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[64]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[65]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[67]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[15b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[15c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[68]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[15d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[69]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[86]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[6b]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[6d]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[15e]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[74]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[6f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[15f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[160]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[161]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[162]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[163]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[164]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[165]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[166]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[167]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[168]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[169]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[16a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[16b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[16c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[16d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[16e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[16f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[170]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[171]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[172]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[79]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[173]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[174]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[175]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[176]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[177]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[178]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[179]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[17a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[66]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[17b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[71]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[73]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[17c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[75]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; demo_run &rArr; demo_config_device &rArr; VL53L1_WaitDeviceBooted &rArr; VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[17d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[92]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[78]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[17e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7a]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[17f]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[180]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_show_id
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_detect_device
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_run
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mesg
</UL>

<P><STRONG><a name="[7e]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_show_id
</UL>

<P><STRONG><a name="[81]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[82]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[80]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6a]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[6c]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[181]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetRangingMeasurementData
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_init
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[89]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>

<P><STRONG><a name="[187]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[7f]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[60]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[8c]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6e]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[7d]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[8e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[88]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8d]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[72]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[77]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[18c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[18d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>HAL_DMA_Abort</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>HAL_GPIO_Init</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_init
</UL>

<P><STRONG><a name="[147]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_wait_ack
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_read_byte
</UL>

<P><STRONG><a name="[14d]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_detect_device
</UL>

<P><STRONG><a name="[141]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_wait_ack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_stop
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_send_byte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_read_byte
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_nack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_ack
</UL>

<P><STRONG><a name="[15a]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stm32_clock_init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[c7]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a1]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a3]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[9f]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stm32_clock_init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[a8]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[aa]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[a7]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[ac]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1172 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stm32_clock_init
</UL>

<P><STRONG><a name="[14a]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[a2]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b2]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[b1]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[ca]"></a>HAL_UART_GetState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_UART_MspInit</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[c9]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[c8]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>VL53L1_ClearInterruptAndStartMeasurement</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_ClearInterruptAndStartMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = VL53L1_ClearInterruptAndStartMeasurement &rArr; ChangePresetMode &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53l1X_write_nbyte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_clear_interrupt_and_enable_next_range
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_run
</UL>

<P><STRONG><a name="[cd]"></a>VL53L1_DataInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_DataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = VL53L1_DataInit &rArr; VL53L1_data_init &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckValue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_config_device
</UL>

<P><STRONG><a name="[d1]"></a>VL53L1_GetInterMeasurementPeriodMilliSeconds</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_GetInterMeasurementPeriodMilliSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53L1_GetInterMeasurementPeriodMilliSeconds &rArr; VL53L1_get_inter_measurement_period_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
</UL>

<P><STRONG><a name="[c6]"></a>VL53L1_GetLimitCheckEnable</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, vl53l1_api.o(i.VL53L1_GetLimitCheckEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_GetLimitCheckEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpleData
</UL>

<P><STRONG><a name="[c5]"></a>VL53L1_GetLimitCheckValue</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, vl53l1_api.o(i.VL53L1_GetLimitCheckValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_GetLimitCheckValue &rArr; VL53L1_get_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_lite_sigma_threshold
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpleData
</UL>

<P><STRONG><a name="[d5]"></a>VL53L1_GetMeasurementDataReady</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_GetMeasurementDataReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = VL53L1_GetMeasurementDataReady &rArr; VL53L1_is_new_data_ready &rArr; VL53L1_RdByte &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_is_new_data_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_run
</UL>

<P><STRONG><a name="[d7]"></a>VL53L1_GetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, vl53l1_api.o(i.VL53L1_GetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L1_GetMeasurementTimingBudgetMicroSeconds &rArr; VL53L1_get_timeouts_us &rArr; VL53L1_calc_decoded_timeout_us &rArr; VL53L1_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_tuning_parm
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetSequenceStepEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
</UL>

<P><STRONG><a name="[da]"></a>VL53L1_GetRangingMeasurementData</STRONG> (Thumb, 68 bytes, Stack size 160 bytes, vl53l1_api.o(i.VL53L1_GetRangingMeasurementData))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = VL53L1_GetRangingMeasurementData &rArr; VL53L1_get_device_results &rArr; VL53L1_get_measurement_results &rArr; VL53L1_ReadMulti &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpleData
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_run
</UL>

<P><STRONG><a name="[d8]"></a>VL53L1_GetSequenceStepEnable</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_GetSequenceStepEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_GetSequenceStepEnable &rArr; VL53L1_get_sequence_config_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_sequence_config_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[ee]"></a>VL53L1_GetTickCount</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vl53l1_platform.o(i.VL53L1_GetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>

<P><STRONG><a name="[dd]"></a>VL53L1_RdByte</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_RdByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VL53L1_RdByte &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_is_new_data_ready
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>

<P><STRONG><a name="[df]"></a>VL53L1_RdWord</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_RdWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VL53L1_RdWord &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_detect_device
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[e0]"></a>VL53L1_ReadMulti</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_ReadMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VL53L1_ReadMulti &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
</UL>

<P><STRONG><a name="[e1]"></a>VL53L1_SetDistanceMode</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, vl53l1_api.o(i.VL53L1_SetDistanceMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = VL53L1_SetDistanceMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_user_zone
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_config_device
</UL>

<P><STRONG><a name="[e2]"></a>VL53L1_SetInterMeasurementPeriodMilliSeconds</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetInterMeasurementPeriodMilliSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VL53L1_SetInterMeasurementPeriodMilliSeconds &rArr; VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_config_device
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
</UL>

<P><STRONG><a name="[cf]"></a>VL53L1_SetLimitCheckEnable</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetLimitCheckEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_SetLimitCheckEnable &rArr; SetLimitValue &rArr; VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>

<P><STRONG><a name="[d0]"></a>VL53L1_SetLimitCheckValue</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetLimitCheckValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L1_SetLimitCheckValue &rArr; SetLimitValue &rArr; VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>

<P><STRONG><a name="[e4]"></a>VL53L1_SetMeasurementTimingBudgetMicroSeconds</STRONG> (Thumb, 288 bytes, Stack size 64 bytes, vl53l1_api.o(i.VL53L1_SetMeasurementTimingBudgetMicroSeconds))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = VL53L1_SetMeasurementTimingBudgetMicroSeconds &rArr; VL53L1_set_timeouts_us &rArr; VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_tuning_parm
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetSequenceStepEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_config_device
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
</UL>

<P><STRONG><a name="[e5]"></a>VL53L1_SetPresetMode</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, vl53l1_api.o(i.VL53L1_SetPresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = VL53L1_SetPresetMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetInterMeasurementPeriodMilliSeconds
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StaticInit
</UL>

<P><STRONG><a name="[e6]"></a>VL53L1_StartMeasurement</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, vl53l1_api.o(i.VL53L1_StartMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = VL53L1_StartMeasurement &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53l1X_write_nbyte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetInterMeasurementPeriodMilliSeconds
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_config_device
</UL>

<P><STRONG><a name="[e7]"></a>VL53L1_StaticInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_StaticInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = VL53L1_StaticInit &rArr; VL53L1_SetPresetMode &rArr; SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_config_device
</UL>

<P><STRONG><a name="[e8]"></a>VL53L1_StopMeasurement</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_StopMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L1_StopMeasurement &rArr; VL53L1_stop_range &rArr; VL53L1_set_system_control &rArr; VL53L1_WriteMulti &rArr; VL53l1X_write_nbyte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_config_device
</UL>

<P><STRONG><a name="[e9]"></a>VL53L1_WaitDeviceBooted</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vl53l1_api.o(i.VL53L1_WaitDeviceBooted))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = VL53L1_WaitDeviceBooted &rArr; VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_config_device
</UL>

<P><STRONG><a name="[eb]"></a>VL53L1_WaitMs</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vl53l1_platform.o(i.VL53L1_WaitMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53L1_WaitMs &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
</UL>

<P><STRONG><a name="[97]"></a>VL53L1_WaitUs</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vl53l1_platform.o(i.VL53L1_WaitUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53L1_WaitUs &rArr; delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[ed]"></a>VL53L1_WaitValueMaskEx</STRONG> (Thumb, 146 bytes, Stack size 576 bytes, vl53l1_platform.o(i.VL53L1_WaitValueMaskEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitMs
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetTickCount
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
</UL>

<P><STRONG><a name="[ef]"></a>VL53L1_WriteMulti</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, vl53l1_platform.o(i.VL53L1_WriteMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = VL53L1_WriteMulti &rArr; VL53l1X_write_nbyte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_write_nbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_system_control
</UL>

<P><STRONG><a name="[f1]"></a>VL53L1_calc_decoded_timeout_us</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, vl53l1_core.o(i.VL53L1_calc_decoded_timeout_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_calc_decoded_timeout_us &rArr; VL53L1_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_timeout
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_us
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
</UL>

<P><STRONG><a name="[f4]"></a>VL53L1_calc_encoded_timeout</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, vl53l1_core.o(i.VL53L1_calc_encoded_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_timeout
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_mclks
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>

<P><STRONG><a name="[f7]"></a>VL53L1_calc_macro_period_us</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vl53l1_core.o(i.VL53L1_calc_macro_period_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_calc_macro_period_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_vcsel_period
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_pll_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>

<P><STRONG><a name="[f8]"></a>VL53L1_calc_pll_period_us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53l1_core_support.o(i.VL53L1_calc_pll_period_us))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
</UL>

<P><STRONG><a name="[127]"></a>VL53L1_calc_range_ignore_threshold</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, vl53l1_core.o(i.VL53L1_calc_range_ignore_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_xtalk_config_struct
</UL>

<P><STRONG><a name="[f5]"></a>VL53L1_calc_timeout_mclks</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_calc_timeout_mclks))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>

<P><STRONG><a name="[fa]"></a>VL53L1_calc_timeout_register_values</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, vl53l1_core.o(i.VL53L1_calc_timeout_register_values))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_mclks
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
</UL>

<P><STRONG><a name="[f3]"></a>VL53L1_calc_timeout_us</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, vl53l1_core.o(i.VL53L1_calc_timeout_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_calc_timeout_us
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
</UL>

<P><STRONG><a name="[10c]"></a>VL53L1_check_ll_driver_rd_state</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, vl53l1_core.o(i.VL53L1_check_ll_driver_rd_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_check_ll_driver_rd_state
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[cc]"></a>VL53L1_clear_interrupt_and_enable_next_range</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_clear_interrupt_and_enable_next_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = VL53L1_clear_interrupt_and_enable_next_range &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53l1X_write_nbyte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ClearInterruptAndStartMeasurement
</UL>

<P><STRONG><a name="[12a]"></a>VL53L1_config_low_power_auto_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_config_low_power_auto_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_config_low_power_auto_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
</UL>

<P><STRONG><a name="[136]"></a>VL53L1_copy_rtn_good_spads_to_buffer</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_copy_rtn_good_spads_to_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[108]"></a>VL53L1_copy_sys_and_core_results_to_range_results</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, vl53l1_api_core.o(i.VL53L1_copy_sys_and_core_results_to_range_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_copy_sys_and_core_results_to_range_results
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[ce]"></a>VL53L1_data_init</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, vl53l1_api_core.o(i.VL53L1_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = VL53L1_data_init &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_data_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_xtalk_config_struct
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_version
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_tuning_parm_storage_struct
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ssc_config_struct
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_refspadchar_config_struct
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_offset_cal_config_struct
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_vhv_loopbound
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>

<P><STRONG><a name="[111]"></a>VL53L1_decode_row_col</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, vl53l1_core_support.o(i.VL53L1_decode_row_col))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_user_zone
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_mode_mitigation_roi
</UL>

<P><STRONG><a name="[f2]"></a>VL53L1_decode_timeout</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_decode_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
</UL>

<P><STRONG><a name="[f9]"></a>VL53L1_decode_vcsel_period</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vl53l1_core_support.o(i.VL53L1_decode_vcsel_period))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
</UL>

<P><STRONG><a name="[116]"></a>VL53L1_decode_zone_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_decode_zone_size))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_user_zone
</UL>

<P><STRONG><a name="[138]"></a>VL53L1_encode_row_col</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_encode_row_col))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_encode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
</UL>

<P><STRONG><a name="[f6]"></a>VL53L1_encode_timeout</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_encode_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_encode_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_encoded_timeout
</UL>

<P><STRONG><a name="[139]"></a>VL53L1_encode_zone_size</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_encode_zone_size))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
</UL>

<P><STRONG><a name="[105]"></a>VL53L1_get_customer_nvm_managed</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, vl53l1_register_funcs.o(i.VL53L1_get_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L1_get_customer_nvm_managed &rArr; VL53L1_ReadMulti &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[db]"></a>VL53L1_get_device_results</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, vl53l1_api_core.o(i.VL53L1_get_device_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = VL53L1_get_device_results &rArr; VL53L1_get_measurement_results &rArr; VL53L1_ReadMulti &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_update_DSS
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_setup_manual_calibration
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_check_ll_driver_rd_state
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_sys_and_core_results_to_range_results
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetRangingMeasurementData
</UL>

<P><STRONG><a name="[d2]"></a>VL53L1_get_inter_measurement_period_ms</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, vl53l1_api_core.o(i.VL53L1_get_inter_measurement_period_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_get_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetInterMeasurementPeriodMilliSeconds
</UL>

<P><STRONG><a name="[d4]"></a>VL53L1_get_lite_min_count_rate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vl53l1_api_core.o(i.VL53L1_get_lite_min_count_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_get_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckValue
</UL>

<P><STRONG><a name="[d3]"></a>VL53L1_get_lite_sigma_threshold</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vl53l1_api_core.o(i.VL53L1_get_lite_sigma_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_get_lite_sigma_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckValue
</UL>

<P><STRONG><a name="[107]"></a>VL53L1_get_measurement_results</STRONG> (Thumb, 178 bytes, Stack size 304 bytes, vl53l1_api_core.o(i.VL53L1_get_measurement_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = VL53L1_get_measurement_results &rArr; VL53L1_ReadMulti &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_system_results
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_debug_results
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_core_results
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[110]"></a>VL53L1_get_mode_mitigation_roi</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, vl53l1_api_core.o(i.VL53L1_get_mode_mitigation_roi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_get_mode_mitigation_roi
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[112]"></a>VL53L1_get_nvm_copy_data</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, vl53l1_register_funcs.o(i.VL53L1_get_nvm_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = VL53L1_get_nvm_copy_data &rArr; VL53L1_ReadMulti &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_nvm_copy_data
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[c0]"></a>VL53L1_get_preset_mode_timing_cfg</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, vl53l1_api_core.o(i.VL53L1_get_preset_mode_timing_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_get_preset_mode_timing_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[dc]"></a>VL53L1_get_sequence_config_bit</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_get_sequence_config_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_get_sequence_config_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetSequenceStepEnable
</UL>

<P><STRONG><a name="[114]"></a>VL53L1_get_static_nvm_managed</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, vl53l1_register_funcs.o(i.VL53L1_get_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1_get_static_nvm_managed &rArr; VL53L1_ReadMulti &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_static_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_read_p2p_data
</UL>

<P><STRONG><a name="[95]"></a>VL53L1_get_timeouts_us</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, vl53l1_api_core.o(i.VL53L1_get_timeouts_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VL53L1_get_timeouts_us &rArr; VL53L1_calc_decoded_timeout_us &rArr; VL53L1_calc_timeout_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_us
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_macro_period_us
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_decoded_timeout_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[d9]"></a>VL53L1_get_tuning_parm</STRONG> (Thumb, 606 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_get_tuning_parm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_get_tuning_parm
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementTimingBudgetMicroSeconds
</UL>

<P><STRONG><a name="[94]"></a>VL53L1_get_user_zone</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, vl53l1_api_core.o(i.VL53L1_get_user_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VL53L1_get_user_zone
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_zone_size
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_decode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[10e]"></a>VL53L1_i2c_decode_core_results</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_core_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_core_results &rArr; VL53L1_i2c_decode_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint32_t
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_int32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
</UL>

<P><STRONG><a name="[106]"></a>VL53L1_i2c_decode_customer_nvm_managed</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_customer_nvm_managed &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
</UL>

<P><STRONG><a name="[10d]"></a>VL53L1_i2c_decode_debug_results</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_debug_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_debug_results &rArr; VL53L1_i2c_decode_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint32_t
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
</UL>

<P><STRONG><a name="[11a]"></a>VL53L1_i2c_decode_int16_t</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_i2c_decode_int16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_decode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
</UL>

<P><STRONG><a name="[118]"></a>VL53L1_i2c_decode_int32_t</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_i2c_decode_int32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_decode_int32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_core_results
</UL>

<P><STRONG><a name="[113]"></a>VL53L1_i2c_decode_nvm_copy_data</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_nvm_copy_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_nvm_copy_data &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
</UL>

<P><STRONG><a name="[115]"></a>VL53L1_i2c_decode_static_nvm_managed</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_static_nvm_managed &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
</UL>

<P><STRONG><a name="[10f]"></a>VL53L1_i2c_decode_system_results</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_decode_system_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_i2c_decode_system_results &rArr; VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_measurement_results
</UL>

<P><STRONG><a name="[119]"></a>VL53L1_i2c_decode_uint16_t</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_i2c_decode_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_decode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_system_results
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_debug_results
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_static_nvm_managed
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_nvm_copy_data
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_customer_nvm_managed
</UL>

<P><STRONG><a name="[117]"></a>VL53L1_i2c_decode_uint32_t</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_i2c_decode_uint32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_decode_uint32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_debug_results
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_decode_core_results
</UL>

<P><STRONG><a name="[11b]"></a>VL53L1_i2c_encode_customer_nvm_managed</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_customer_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_customer_nvm_managed &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[11e]"></a>VL53L1_i2c_encode_dynamic_config</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_dynamic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_dynamic_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[11f]"></a>VL53L1_i2c_encode_general_config</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_general_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_general_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[11d]"></a>VL53L1_i2c_encode_int16_t</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_i2c_encode_int16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_i2c_encode_int16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
</UL>

<P><STRONG><a name="[120]"></a>VL53L1_i2c_encode_static_config</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_static_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_static_config &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[121]"></a>VL53L1_i2c_encode_static_nvm_managed</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_static_nvm_managed))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_static_nvm_managed &rArr; VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[124]"></a>VL53L1_i2c_encode_system_control</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_system_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_i2c_encode_system_control
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_system_control
</UL>

<P><STRONG><a name="[122]"></a>VL53L1_i2c_encode_timing_config</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_i2c_encode_timing_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L1_i2c_encode_timing_config &rArr; VL53L1_i2c_encode_uint32_t
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint32_t
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[11c]"></a>VL53L1_i2c_encode_uint16_t</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_i2c_encode_uint16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_i2c_encode_uint16_t
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_nvm_managed
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_general_config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_dynamic_config
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
</UL>

<P><STRONG><a name="[123]"></a>VL53L1_i2c_encode_uint32_t</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vl53l1_core.o(i.VL53L1_i2c_encode_uint32_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L1_i2c_encode_uint32_t
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
</UL>

<P><STRONG><a name="[9b]"></a>VL53L1_init_and_start_range</STRONG> (Thumb, 628 bytes, Stack size 344 bytes, vl53l1_api_core.o(i.VL53L1_init_and_start_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53l1X_write_nbyte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_ll_driver_rd_state
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_update_ll_driver_cfg_state
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_timing_config
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_system_control
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_nvm_managed
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_static_config
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_general_config
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_dynamic_config
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_customer_nvm_managed
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_clear_interrupt_and_enable_next_range
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[fb]"></a>VL53L1_init_ll_driver_state</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_init_ll_driver_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_poll_for_boot_completion
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[101]"></a>VL53L1_init_offset_cal_config_struct</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_offset_cal_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[fe]"></a>VL53L1_init_refspadchar_config_struct</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_refspadchar_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[ff]"></a>VL53L1_init_ssc_config_struct</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_ssc_config_struct))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[102]"></a>VL53L1_init_tuning_parm_storage_struct</STRONG> (Thumb, 164 bytes, Stack size 0 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_tuning_parm_storage_struct))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[fc]"></a>VL53L1_init_version</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vl53l1_core.o(i.VL53L1_init_version))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[100]"></a>VL53L1_init_xtalk_config_struct</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vl53l1_api_preset_modes.o(i.VL53L1_init_xtalk_config_struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VL53L1_init_xtalk_config_struct &rArr; VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_range_ignore_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[d6]"></a>VL53L1_is_new_data_ready</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, vl53l1_wait.o(i.VL53L1_is_new_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = VL53L1_is_new_data_ready &rArr; VL53L1_RdByte &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementDataReady
</UL>

<P><STRONG><a name="[104]"></a>VL53L1_low_power_auto_data_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_low_power_auto_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_low_power_auto_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[13a]"></a>VL53L1_low_power_auto_data_stop_range</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_low_power_auto_data_stop_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_low_power_auto_data_stop_range
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
</UL>

<P><STRONG><a name="[109]"></a>VL53L1_low_power_auto_setup_manual_calibration</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_low_power_auto_setup_manual_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_low_power_auto_setup_manual_calibration
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[10a]"></a>VL53L1_low_power_auto_update_DSS</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, vl53l1_core.o(i.VL53L1_low_power_auto_update_DSS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_low_power_auto_update_DSS
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_device_results
</UL>

<P><STRONG><a name="[ea]"></a>VL53L1_poll_for_boot_completion</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vl53l1_wait.o(i.VL53L1_poll_for_boot_completion))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitValueMaskEx
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitDeviceBooted
</UL>

<P><STRONG><a name="[128]"></a>VL53L1_preset_mode_low_power_auto_long_ranging</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_low_power_auto_long_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = VL53L1_preset_mode_low_power_auto_long_ranging &rArr; VL53L1_preset_mode_timed_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[12b]"></a>VL53L1_preset_mode_low_power_auto_ranging</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_low_power_auto_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = VL53L1_preset_mode_low_power_auto_ranging &rArr; VL53L1_preset_mode_timed_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[12d]"></a>VL53L1_preset_mode_low_power_auto_short_ranging</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_low_power_auto_short_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_config_low_power_auto_mode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[12f]"></a>VL53L1_preset_mode_olt</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_olt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_olt &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[131]"></a>VL53L1_preset_mode_singleshot_ranging</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_singleshot_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_singleshot_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[130]"></a>VL53L1_preset_mode_standard_ranging</STRONG> (Thumb, 314 bytes, Stack size 20 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm2_cal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm1_cal
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_singleshot_ranging
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_olt
</UL>

<P><STRONG><a name="[132]"></a>VL53L1_preset_mode_standard_ranging_long_range</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_long_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
</UL>

<P><STRONG><a name="[133]"></a>VL53L1_preset_mode_standard_ranging_mm1_cal</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_mm1_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_mm1_cal &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[134]"></a>VL53L1_preset_mode_standard_ranging_mm2_cal</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_mm2_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_mm2_cal &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[135]"></a>VL53L1_preset_mode_standard_ranging_short_range</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_standard_ranging_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
</UL>

<P><STRONG><a name="[12c]"></a>VL53L1_preset_mode_timed_ranging</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_timed_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = VL53L1_preset_mode_timed_ranging &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
</UL>

<P><STRONG><a name="[129]"></a>VL53L1_preset_mode_timed_ranging_long_range</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_timed_ranging_long_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = VL53L1_preset_mode_timed_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging_long_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
</UL>

<P><STRONG><a name="[12e]"></a>VL53L1_preset_mode_timed_ranging_short_range</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, vl53l1_api_preset_modes.o(i.VL53L1_preset_mode_timed_ranging_short_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
</UL>

<P><STRONG><a name="[fd]"></a>VL53L1_read_p2p_data</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_read_p2p_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = VL53L1_read_p2p_data &rArr; VL53L1_get_nvm_copy_data &rArr; VL53L1_ReadMulti &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_static_nvm_managed
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_nvm_copy_data
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_customer_nvm_managed
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_copy_rtn_good_spads_to_buffer
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_mode_mitigation_roi
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[e3]"></a>VL53L1_set_inter_measurement_period_ms</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, vl53l1_api_core.o(i.VL53L1_set_inter_measurement_period_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_set_inter_measurement_period_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetInterMeasurementPeriodMilliSeconds
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
</UL>

<P><STRONG><a name="[be]"></a>VL53L1_set_lite_min_count_rate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vl53l1_api_core.o(i.VL53L1_set_lite_min_count_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_set_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>

<P><STRONG><a name="[bd]"></a>VL53L1_set_lite_sigma_threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, vl53l1_api_core.o(i.VL53L1_set_lite_sigma_threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLimitValue
</UL>

<P><STRONG><a name="[c1]"></a>VL53L1_set_preset_mode</STRONG> (Thumb, 474 bytes, Stack size 80 bytes, vl53l1_api_core.o(i.VL53L1_set_preset_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_inter_measurement_period_ms
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_short_range
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging_long_range
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_timed_ranging
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_short_range
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm2_cal
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_mm1_cal
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging_long_range
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_standard_ranging
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_singleshot_ranging
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_olt
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_short_ranging
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_ranging
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_preset_mode_low_power_auto_long_ranging
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[137]"></a>VL53L1_set_system_control</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vl53l1_register_funcs.o(i.VL53L1_set_system_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = VL53L1_set_system_control &rArr; VL53L1_WriteMulti &rArr; VL53l1X_write_nbyte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_i2c_encode_system_control
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
</UL>

<P><STRONG><a name="[99]"></a>VL53L1_set_timeouts_us</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, vl53l1_api_core.o(i.VL53L1_set_timeouts_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = VL53L1_set_timeouts_us &rArr; VL53L1_calc_timeout_register_values &rArr; VL53L1_calc_encoded_timeout &rArr; VL53L1_encode_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_calc_timeout_register_values
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[9a]"></a>VL53L1_set_user_zone</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, vl53l1_api_core.o(i.VL53L1_set_user_zone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = VL53L1_set_user_zone &rArr; VL53L1_encode_row_col
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_zone_size
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_encode_row_col
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[103]"></a>VL53L1_set_vhv_loopbound</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, vl53l1_api_core.o(i.VL53L1_set_vhv_loopbound))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VL53L1_set_vhv_loopbound
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_data_init
</UL>

<P><STRONG><a name="[96]"></a>VL53L1_stop_range</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, vl53l1_api_core.o(i.VL53L1_stop_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = VL53L1_stop_range &rArr; VL53L1_set_system_control &rArr; VL53L1_WriteMulti &rArr; VL53l1X_write_nbyte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_system_control
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_low_power_auto_data_stop_range
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_ll_driver_state
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StopMeasurement
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[126]"></a>VL53L1_update_ll_driver_cfg_state</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_update_ll_driver_cfg_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_update_ll_driver_cfg_state
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[125]"></a>VL53L1_update_ll_driver_rd_state</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, vl53l1_core.o(i.VL53L1_update_ll_driver_rd_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L1_update_ll_driver_rd_state
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
</UL>

<P><STRONG><a name="[de]"></a>VL53l1X_read_byte</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, vl53l1_i2c_platform.o(i.VL53l1X_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_wait_ack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_stop
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_send_byte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ReadMulti
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdByte
</UL>

<P><STRONG><a name="[f0]"></a>VL53l1X_write_nbyte</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, vl53l1_i2c_platform.o(i.VL53l1X_write_nbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = VL53l1X_write_nbyte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_wait_ack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_stop
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WriteMulti
</UL>

<P><STRONG><a name="[85]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[7b]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[140]"></a>atk_ms53l1m_iic_ack</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, atk_ms53l1m_iic.o(i.atk_ms53l1m_iic_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atk_ms53l1m_iic_ack &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_read_byte
</UL>

<P><STRONG><a name="[144]"></a>atk_ms53l1m_iic_init</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, atk_ms53l1m_iic.o(i.atk_ms53l1m_iic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = atk_ms53l1m_iic_init &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_init
</UL>

<P><STRONG><a name="[146]"></a>atk_ms53l1m_iic_nack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, atk_ms53l1m_iic.o(i.atk_ms53l1m_iic_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atk_ms53l1m_iic_nack &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_read_byte
</UL>

<P><STRONG><a name="[13e]"></a>atk_ms53l1m_iic_read_byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, atk_ms53l1m_iic.o(i.atk_ms53l1m_iic_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atk_ms53l1m_iic_read_byte &rArr; atk_ms53l1m_iic_nack &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_nack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_ack
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_read_byte
</UL>

<P><STRONG><a name="[13c]"></a>atk_ms53l1m_iic_send_byte</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, atk_ms53l1m_iic.o(i.atk_ms53l1m_iic_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = atk_ms53l1m_iic_send_byte &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_write_nbyte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_read_byte
</UL>

<P><STRONG><a name="[13b]"></a>atk_ms53l1m_iic_start</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, atk_ms53l1m_iic.o(i.atk_ms53l1m_iic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atk_ms53l1m_iic_start &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_write_nbyte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_read_byte
</UL>

<P><STRONG><a name="[13f]"></a>atk_ms53l1m_iic_stop</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, atk_ms53l1m_iic.o(i.atk_ms53l1m_iic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_write_nbyte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_read_byte
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_wait_ack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_init
</UL>

<P><STRONG><a name="[13d]"></a>atk_ms53l1m_iic_wait_ack</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, atk_ms53l1m_iic.o(i.atk_ms53l1m_iic_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_stop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_write_nbyte
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53l1X_read_byte
</UL>

<P><STRONG><a name="[148]"></a>atk_ms53l1m_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, atk_ms53l1m.o(i.atk_ms53l1m_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = atk_ms53l1m_init &rArr; atk_ms53l1m_iic_init &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_run
</UL>

<P><STRONG><a name="[149]"></a>delay_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>delay_ms</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_ms &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_detect_device
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_run
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitMs
</UL>

<P><STRONG><a name="[143]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_delay
</UL>

<P><STRONG><a name="[14f]"></a>demo_run</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, demo.o(i.demo_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = demo_run &rArr; demo_config_device &rArr; VL53L1_WaitDeviceBooted &rArr; VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetRangingMeasurementData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetMeasurementDataReady
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ClearInterruptAndStartMeasurement
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_detect_device
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_config_device
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[151]"></a>lcd_draw_point</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd.o(i.lcd_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_draw_point &rArr; lcd_set_cursor &rArr; lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_ram_prepare
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_char
</UL>

<P><STRONG><a name="[152]"></a>lcd_set_cursor</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, lcd.o(i.lcd_set_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcd_set_cursor &rArr; lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_wr_regno
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_wr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
</UL>

<P><STRONG><a name="[156]"></a>lcd_show_char</STRONG> (Thumb, 294 bytes, Stack size 44 bytes, lcd.o(i.lcd_show_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lcd_show_char &rArr; lcd_draw_point &rArr; lcd_set_cursor &rArr; lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
</UL>

<P><STRONG><a name="[150]"></a>lcd_show_string</STRONG> (Thumb, 106 bytes, Stack size 44 bytes, lcd.o(i.lcd_show_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lcd_show_string &rArr; lcd_show_char &rArr; lcd_draw_point &rArr; lcd_set_cursor &rArr; lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_show_id
</UL>

<P><STRONG><a name="[155]"></a>lcd_wr_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.lcd_wr_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_wr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>

<P><STRONG><a name="[154]"></a>lcd_wr_regno</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(i.lcd_wr_regno))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_wr_regno
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_cursor
</UL>

<P><STRONG><a name="[153]"></a>lcd_write_ram_prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.lcd_write_ram_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_draw_point
</UL>

<P><STRONG><a name="[76]"></a>main</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = main &rArr; demo_run &rArr; demo_config_device &rArr; VL53L1_WaitDeviceBooted &rArr; VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stm32_clock_init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_run
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_mesg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[159]"></a>show_mesg</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.show_mesg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = show_mesg &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[157]"></a>sys_stm32_clock_init</STRONG> (Thumb, 192 bytes, Stack size 96 bytes, sys.o(i.sys_stm32_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sys_stm32_clock_init &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>usart_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usart.o(i.usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = usart_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[18e]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[18f]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[14b]"></a>demo_config_device</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, demo.o(i.demo_config_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = demo_config_device &rArr; VL53L1_WaitDeviceBooted &rArr; VL53L1_poll_for_boot_completion &rArr; VL53L1_WaitValueMaskEx &rArr; VL53L1_RdByte &rArr; VL53l1X_read_byte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitDeviceBooted
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StopMeasurement
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StaticInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_StartMeasurement
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetMeasurementTimingBudgetMicroSeconds
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetInterMeasurementPeriodMilliSeconds
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_DataInit
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_run
</UL>

<P><STRONG><a name="[14c]"></a>demo_detect_device</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, demo.o(i.demo_detect_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = demo_detect_device &rArr; demo_show_id &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_RdWord
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_show_id
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_run
</UL>

<P><STRONG><a name="[14e]"></a>demo_show_id</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, demo.o(i.demo_show_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = demo_show_id &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_string
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_detect_device
</UL>

<P><STRONG><a name="[a4]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[a5]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[63]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[af]"></a>UART_EndRxTransfer</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>UART_Receive_IT</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>UART_SetConfig</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[b3]"></a>UART_Transmit_IT</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>atk_ms53l1m_iic_delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, atk_ms53l1m_iic.o(i.atk_ms53l1m_iic_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_wait_ack
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_stop
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_start
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_send_byte
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_read_byte
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_nack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atk_ms53l1m_iic_ack
</UL>

<P><STRONG><a name="[93]"></a>ChangePresetMode</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, vl53l1_api.o(i.ChangePresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ChangePresetMode &rArr; VL53L1_init_and_start_range &rArr; VL53L1_WriteMulti &rArr; VL53l1X_write_nbyte &rArr; atk_ms53l1m_iic_wait_ack &rArr; atk_ms53l1m_iic_stop &rArr; atk_ms53l1m_iic_delay &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_stop_range
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_user_zone
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_timeouts_us
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_init_and_start_range
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_user_zone
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_timeouts_us
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_WaitUs
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_ClearInterruptAndStartMeasurement
</UL>

<P><STRONG><a name="[bf]"></a>ComputeDevicePresetMode</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vl53l1_api.o(i.ComputeDevicePresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ComputeDevicePresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPresetMode
</UL>

<P><STRONG><a name="[c3]"></a>ComputeRQL</STRONG> (Thumb, 152 bytes, Stack size 36 bytes, vl53l1_api.o(i.ComputeRQL))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ComputeRQL
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpleData
</UL>

<P><STRONG><a name="[c4]"></a>ConvertStatusLite</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, vl53l1_api.o(i.ConvertStatusLite))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSimpleData
</UL>

<P><STRONG><a name="[bc]"></a>SetLimitValue</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, vl53l1_api.o(i.SetLimitValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetLimitValue &rArr; VL53L1_set_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_lite_sigma_threshold
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_lite_min_count_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckValue
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetLimitCheckEnable
</UL>

<P><STRONG><a name="[98]"></a>SetPresetMode</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, vl53l1_api.o(i.SetPresetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = SetPresetMode &rArr; VL53L1_set_preset_mode &rArr; VL53L1_preset_mode_low_power_auto_short_ranging &rArr; VL53L1_preset_mode_timed_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging_short_range &rArr; VL53L1_preset_mode_standard_ranging
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_set_preset_mode
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_get_preset_mode_timing_cfg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeDevicePresetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetDistanceMode
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_SetPresetMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChangePresetMode
</UL>

<P><STRONG><a name="[c2]"></a>SetSimpleData</STRONG> (Thumb, 336 bytes, Stack size 72 bytes, vl53l1_api.o(i.SetSimpleData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetSimpleData &rArr; VL53L1_GetLimitCheckValue &rArr; VL53L1_get_lite_sigma_threshold
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckValue
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetLimitCheckEnable
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertStatusLite
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeRQL
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L1_GetRangingMeasurementData
</UL>

<P><STRONG><a name="[61]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
