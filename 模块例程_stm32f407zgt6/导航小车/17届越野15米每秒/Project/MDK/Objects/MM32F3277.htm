<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\MM32F3277.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\MM32F3277.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Apr 26 10:14:42 2025
<BR><P>
<H3>Maximum Stack Usage =        968 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; EEPROM_COLLECT &rArr; GET_MY_POSI &rArr; GET_POSI &rArr; GeodeticToCartesian &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[35]">ADC3_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from common.o(i.BusFault_Handler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1e]">CAN1_RX_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[43]">COMP1_2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from isr.o(i.DMA1_Channel1_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from isr.o(i.DMA1_Channel2_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from isr.o(i.DMA1_Channel3_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from isr.o(i.DMA1_Channel4_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from isr.o(i.DMA1_Channel5_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from isr.o(i.DMA1_Channel6_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from isr.o(i.DMA1_Channel7_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3d]">DMA2_Channel1_IRQHandler</a> from isr.o(i.DMA2_Channel1_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3e]">DMA2_Channel2_IRQHandler</a> from isr.o(i.DMA2_Channel2_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3f]">DMA2_Channel3_IRQHandler</a> from isr.o(i.DMA2_Channel3_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[40]">DMA2_Channel4_IRQHandler</a> from isr.o(i.DMA2_Channel4_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[41]">DMA2_Channel5_IRQHandler</a> from isr.o(i.DMA2_Channel5_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from common.o(i.DebugMon_Handler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[42]">ETH_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from isr.o(i.EXTI0_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2e]">EXTI15_10_IRQHandler</a> from isr.o(i.EXTI15_10_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from isr.o(i.EXTI1_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from isr.o(i.EXTI2_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from isr.o(i.EXTI3_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from isr.o(i.EXTI4_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1f]">EXTI9_5_IRQHandler</a> from isr.o(i.EXTI9_5_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1d]">FlashCache_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from common.o(i.HardFault_Handler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[27]">I2C1_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[28]">I2C2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from common.o(i.MemManage_Handler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from common.o(i.NMI_Handler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[44]">OTG_FS_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[30]">OTG_FS_WKUP_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from common.o(i.PendSV_Handler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[f]">RCC_CRS_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2f]">RTCAlarm_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[36]">SDIO_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[38]">SPI3_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from common.o(i.SVC_Handler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[49]">SystemInit</a> from system_mm32f327x.o(i.SystemInit) referenced from startup_mm32f327x_keil.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[20]">TIM1_BRK_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[23]">TIM1_CC_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[22]">TIM1_TRG_COM_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[21]">TIM1_UP_IRQHandler</a> from isr.o(i.TIM1_UP_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[24]">TIM2_IRQHandler</a> from isr.o(i.TIM2_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[25]">TIM3_IRQHandler</a> from isr.o(i.TIM3_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[26]">TIM4_IRQHandler</a> from isr.o(i.TIM4_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[37]">TIM5_IRQHandler</a> from isr.o(i.TIM5_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3b]">TIM6_IRQHandler</a> from isr.o(i.TIM6_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3c]">TIM7_IRQHandler</a> from isr.o(i.TIM7_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[31]">TIM8_BRK_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[34]">TIM8_CC_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[33]">TIM8_TRG_COM_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[32]">TIM8_UP_IRQHandler</a> from isr.o(i.TIM8_UP_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2b]">UART1_IRQHandler</a> from isr.o(i.UART1_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2c]">UART2_IRQHandler</a> from isr.o(i.UART2_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[2d]">UART3_IRQHandler</a> from isr.o(i.UART3_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[39]">UART4_IRQHandler</a> from isr.o(i.UART4_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[3a]">UART5_IRQHandler</a> from isr.o(i.UART5_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[45]">UART6_IRQHandler</a> from isr.o(i.UART6_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[46]">UART7_IRQHandler</a> from isr.o(i.UART7_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[47]">UART8_IRQHandler</a> from isr.o(i.UART8_IRQHandler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from common.o(i.UsageFault_Handler) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_mm32f327x_keil.o(.text) referenced from startup_mm32f327x_keil.o(RESET)
 <LI><a href="#[4a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mm32f327x_keil.o(.text)
 <LI><a href="#[4c]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[4b]">fputc</a> from zf_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[48]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[69]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[140]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[141]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[142]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[143]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[144]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>COMP1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>FlashCache_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f327x_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_delay_us
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INIT
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
</UL>

<P><STRONG><a name="[10a]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
</UL>

<P><STRONG><a name="[10c]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_parse
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gngga_parse
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdateIMU
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
</UL>

<P><STRONG><a name="[55]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdateIMU
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdateIMU
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_read_mag
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_DISTANCE
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad_format
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_double
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_POSI
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_DISTANCE
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad_format
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[5d]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_double
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5f]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_double
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_read_mag
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_double
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad_format
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
</UL>

<P><STRONG><a name="[128]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_double
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad_format
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_DISTANCE
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad_format
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdate
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdateIMU
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdate
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad_format
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdateIMU
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdate
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[148]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[149]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[14a]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>

<P><STRONG><a name="[53]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[f3]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[14c]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[5a]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[e6]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[14d]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[67]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[14e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_fsqrt</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[14f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>AHRS_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, imu.o(i.AHRS_init))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_INIT
</UL>

<P><STRONG><a name="[6b]"></a>AHRS_update</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, imu.o(i.AHRS_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = AHRS_update &rArr; MahonyAHRSupdate &rArr; MahonyAHRSupdateIMU &rArr; invSqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdate
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INS_task
</UL>

<P><STRONG><a name="[d4]"></a>AutoCalPllFactor</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, system_mm32f327x.o(i.AutoCalPllFactor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AutoCalPllFactor
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToXX
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isr.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, isr.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_uart_dma
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_dma
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_dma
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isr.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isr.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isr.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(i.DMA2_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(i.DMA2_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(i.DMA2_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(i.DMA2_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, isr.o(i.DMA2_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[6d]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hal_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>EEPROM_COLLECT</STRONG> (Thumb, 552 bytes, Stack size 240 bytes, eeprom.o(i.EEPROM_COLLECT))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = EEPROM_COLLECT &rArr; GET_MY_POSI &rArr; GET_POSI &rArr; GeodeticToCartesian &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_POSI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_DISTANCE
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_MY_POSI
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POSI_COPY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showstr
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>EEPROM_GET_POSI</STRONG> (Thumb, 58 bytes, Stack size 80 bytes, eeprom.o(i.EEPROM_GET_POSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = EEPROM_GET_POSI &rArr; GET_POSI &rArr; GeodeticToCartesian &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_POSI
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_INIT
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track
</UL>

<P><STRONG><a name="[81]"></a>EEPROM_INIT</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eeprom.o(i.EEPROM_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EEPROM_INIT &rArr; simiic_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, isr.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, isr.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, isr.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_vsync
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_uart_vsync
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_vsync
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>EXTI_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_exti.o(i.EXTI_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[84]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[7a]"></a>GET_DISTANCE</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, eeprom.o(i.GET_DISTANCE))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = GET_DISTANCE &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
</UL>

<P><STRONG><a name="[74]"></a>GET_MY_POSI</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, gps.o(i.GET_MY_POSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = GET_MY_POSI &rArr; GET_POSI &rArr; GeodeticToCartesian &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_POSI
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
</UL>

<P><STRONG><a name="[89]"></a>GET_NUM</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eeprom.o(i.GET_NUM))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GET_NUM &rArr; I2C_EE_BufferRead &rArr; simiic_read_regs &rArr; send_ch &rArr; sccb_waitack
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_INIT
</UL>

<P><STRONG><a name="[8a]"></a>GET_OFFSET</STRONG> (Thumb, 368 bytes, Stack size 104 bytes, track.o(i.GET_OFFSET))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = GET_OFFSET &rArr; GET_MY_POSI &rArr; GET_POSI &rArr; GeodeticToCartesian &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_MY_POSI
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rad_format
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track
</UL>

<P><STRONG><a name="[78]"></a>GET_POSI</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, gps.o(i.GET_POSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = GET_POSI &rArr; GeodeticToCartesian &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_MY_POSI
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GET_POSI
</UL>

<P><STRONG><a name="[af]"></a>GPIO_Init</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, hal_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_TIM2_GPIO_Init_Out
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_GPIO_Init_Out
</UL>

<P><STRONG><a name="[b6]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hal_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_TIM2_GPIO_Init_Out
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_GPIO_Init_Out
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INS_task
</UL>

<P><STRONG><a name="[c6]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl
</UL>

<P><STRONG><a name="[b1]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl
</UL>

<P><STRONG><a name="[91]"></a>GPS_INIT</STRONG> (Thumb, 370 bytes, Stack size 192 bytes, gps.o(i.GPS_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = GPS_INIT &rArr; GeodeticToCartesian &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putbuff
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>GeodeticToCartesian</STRONG> (Thumb, 3116 bytes, Stack size 392 bytes, gps.o(i.GeodeticToCartesian))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = GeodeticToCartesian &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trunc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INIT
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_POSI
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>I2C_EE_BufferRead</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, eeprom.o(i.I2C_EE_BufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C_EE_BufferRead &rArr; simiic_read_regs &rArr; send_ch &rArr; sccb_waitack
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_regs
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_NUM
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GET_POSI
</UL>

<P><STRONG><a name="[75]"></a>I2C_EE_BufferWrite</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, eeprom.o(i.I2C_EE_BufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_EE_BufferWrite &rArr; I2C_EE_PageWrite &rArr; simiic_write_regs &rArr; send_ch &rArr; sccb_waitack
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
</UL>

<P><STRONG><a name="[9c]"></a>I2C_EE_PageWrite</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, eeprom.o(i.I2C_EE_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_EE_PageWrite &rArr; simiic_write_regs &rArr; send_ch &rArr; sccb_waitack
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
</UL>

<P><STRONG><a name="[9e]"></a>IMU_INIT</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, imu.o(i.IMU_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IMU_INIT &rArr; IMU_data_get &rArr; ist8310_read_mag &rArr; ist8310_IIC_read_muli_reg &rArr; simiic_read_regs_IST &rArr; send_ch_IST &rArr; sccb_waitack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_TIM_INIT
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>IMU_TIM_INIT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tim.o(i.IMU_TIM_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IMU_TIM_INIT &rArr; NVIC_Configure &rArr; exNVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_INIT
</UL>

<P><STRONG><a name="[a2]"></a>IMU_data_get</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, imu.o(i.IMU_data_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IMU_data_get &rArr; ist8310_read_mag &rArr; ist8310_IIC_read_muli_reg &rArr; simiic_read_regs_IST &rArr; send_ch_IST &rArr; sccb_waitack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_read_mag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_gyro_spi
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_accdata_spi
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_INIT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INS_task
</UL>

<P><STRONG><a name="[aa]"></a>INS_task</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, imu.o(i.INS_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = INS_task &rArr; AHRS_update &rArr; MahonyAHRSupdate &rArr; MahonyAHRSupdateIMU &rArr; invSqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_update
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_HANDER_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>KEY_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, led.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>LED_Init</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>MahonyAHRSupdate</STRONG> (Thumb, 1888 bytes, Stack size 168 bytes, mahonyahrs.o(i.MahonyAHRSupdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = MahonyAHRSupdate &rArr; MahonyAHRSupdateIMU &rArr; invSqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdateIMU
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_update
</UL>

<P><STRONG><a name="[b3]"></a>MahonyAHRSupdateIMU</STRONG> (Thumb, 1084 bytes, Stack size 96 bytes, mahonyahrs.o(i.MahonyAHRSupdateIMU))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MahonyAHRSupdateIMU &rArr; invSqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdate
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>Motor_TIM1_GPIO_Init_Out</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, pwm.o(i.Motor_TIM1_GPIO_Init_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Motor_TIM1_GPIO_Init_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_Init
</UL>

<P><STRONG><a name="[b7]"></a>Motor_TIM1_PWM_Init_Out</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, pwm.o(i.Motor_TIM1_PWM_Init_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor_TIM1_PWM_Init_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_Init
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>NVIC_Configure</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tim.o(i.NVIC_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NVIC_Configure &rArr; exNVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exNVIC_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_TIM_INIT
</UL>

<P><STRONG><a name="[12a]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hal_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_init
</UL>

<P><STRONG><a name="[c1]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configure
</UL>

<P><STRONG><a name="[79]"></a>POSI_COPY</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, track.o(i.POSI_COPY))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = POSI_COPY
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_TIM2_GPIO_Init_Out
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_GPIO_Init_Out
</UL>

<P><STRONG><a name="[ce]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Remo_TIM2_PWM_Init_Out
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[b8]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_PWM_Init_Out
</UL>

<P><STRONG><a name="[c3]"></a>Remote_Byte_Get</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, remote.o(i.Remote_Byte_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Remote_Byte_Get &rArr; Remote_Data_Analysis &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Data_Analysis
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_hander
</UL>

<P><STRONG><a name="[7f]"></a>Remote_Ctrl</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, pwm.o(i.Remote_Ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Remote_Ctrl &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
</UL>

<P><STRONG><a name="[c8]"></a>Remote_Ctrl_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pwm.o(i.Remote_Ctrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Remote_Ctrl_Init &rArr; Servo_Remo_TIM2_PWM_Init_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_TIM2_GPIO_Init_Out
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Remo_TIM2_PWM_Init_Out
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_PWM_Init_Out
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_GPIO_Init_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>Remote_Data_Analysis</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, remote.o(i.Remote_Data_Analysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Remote_Data_Analysis &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Byte_Get
</UL>

<P><STRONG><a name="[cc]"></a>SERVO_SET</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pwm.o(i.SERVO_SET))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SERVO_SET
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int16_constrain
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>Servo_Remo_TIM2_PWM_Init_Out</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, pwm.o(i.Servo_Remo_TIM2_PWM_Init_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Servo_Remo_TIM2_PWM_Init_Out
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_Init
</UL>

<P><STRONG><a name="[c9]"></a>Servo_TIM2_GPIO_Init_Out</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, pwm.o(i.Servo_TIM2_GPIO_Init_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Servo_TIM2_GPIO_Init_Out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_Init
</UL>

<P><STRONG><a name="[49]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, system_mm32f327x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockToXX &rArr; AutoCalPllFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, isr.o(i.TIM1_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(i.TIM2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, isr.o(i.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, isr.o(i.TIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM5_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, isr.o(i.TIM5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>TIM6_HANDER_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tim.o(i.TIM6_HANDER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = TIM6_HANDER_IRQHandler &rArr; INS_task &rArr; AHRS_update &rArr; MahonyAHRSupdate &rArr; MahonyAHRSupdateIMU &rArr; invSqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INS_task
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[3b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, isr.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = TIM6_IRQHandler &rArr; TIM6_HANDER_IRQHandler &rArr; INS_task &rArr; AHRS_update &rArr; MahonyAHRSupdate &rArr; MahonyAHRSupdateIMU &rArr; invSqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_HANDER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>TIM6_Init</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tim.o(i.TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM6_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_TIM_INIT
</UL>

<P><STRONG><a name="[3c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, isr.o(i.TIM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, isr.o(i.TIM8_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Remo_TIM2_PWM_Init_Out
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_PWM_Init_Out
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[d8]"></a>TIM_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[d7]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_HANDER_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>TIM_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Remo_TIM2_PWM_Init_Out
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_PWM_Init_Out
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[bf]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Remo_TIM2_PWM_Init_Out
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_PWM_Init_Out
</UL>

<P><STRONG><a name="[d6]"></a>TIM_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_HANDER_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[bc]"></a>TIM_OC2Init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_OC2Init))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_PWM_Init_Out
</UL>

<P><STRONG><a name="[bd]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_PWM_Init_Out
</UL>

<P><STRONG><a name="[cf]"></a>TIM_OC3Init</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_OC3Init))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Remo_TIM2_PWM_Init_Out
</UL>

<P><STRONG><a name="[d0]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Remo_TIM2_PWM_Init_Out
</UL>

<P><STRONG><a name="[bb]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Remo_TIM2_PWM_Init_Out
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_PWM_Init_Out
</UL>

<P><STRONG><a name="[c5]"></a>TIM_SetCompare2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl
</UL>

<P><STRONG><a name="[c7]"></a>TIM_SetCompare3</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERVO_SET
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl
</UL>

<P><STRONG><a name="[ba]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Remo_TIM2_PWM_Init_Out
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_PWM_Init_Out
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[b9]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Servo_Remo_TIM2_PWM_Init_Out
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_TIM1_PWM_Init_Out
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_Init
</UL>

<P><STRONG><a name="[da]"></a>Track</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, track.o(i.Track))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = Track &rArr; GET_OFFSET &rArr; GET_MY_POSI &rArr; GET_POSI &rArr; GeodeticToCartesian &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GET_POSI
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERVO_SET
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mode
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>Track_INIT</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, track.o(i.Track_INIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Track_INIT &rArr; EEPROM_GET_POSI &rArr; GET_POSI &rArr; GeodeticToCartesian &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_NUM
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GET_POSI
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>UART1_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, isr.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>UART2_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, isr.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_IRQHandler &rArr; uart_interrupt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>UART3_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, isr.o(i.UART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART4_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, isr.o(i.UART4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART5_IRQHandler</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, isr.o(i.UART5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART6_IRQHandler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, isr.o(i.UART6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART7_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, isr.o(i.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART7_IRQHandler &rArr; remote_hander &rArr; Remote_Byte_Get &rArr; Remote_Data_Analysis &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_hander
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART8_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, isr.o(i.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART8_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ov7725_cof_uart_interrupt
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mt9v03x_uart_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, common.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f327x_keil.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[151]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[cb]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Data_Analysis
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[152]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[153]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[e3]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[154]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[7d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
</UL>

<P><STRONG><a name="[155]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[156]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[ea]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[fd]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_assert</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, seekfree_assert.o(i.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
</UL>

<P><STRONG><a name="[e5]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[e7]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[e8]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[e9]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[ec]"></a>__kernel_tan</STRONG> (Thumb, 586 bytes, Stack size 80 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __kernel_tan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
</UL>

<P><STRONG><a name="[ed]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[ee]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[ef]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[f0]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[f1]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[eb]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[f2]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[f4]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[f5]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[f6]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[157]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[158]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[159]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[fe]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tan
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[13b]"></a>afio_init</STRONG> (Thumb, 218 bytes, Stack size 20 bytes, zf_gpio.o(i.afio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = afio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pin_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_init
</UL>

<P><STRONG><a name="[fb]"></a>asinf</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, asinf.o(i.asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = asinf &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
</UL>

<P><STRONG><a name="[ff]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_tan
</UL>

<P><STRONG><a name="[100]"></a>atan2f</STRONG> (Thumb, 598 bytes, Stack size 32 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = atan2f &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
</UL>

<P><STRONG><a name="[101]"></a>board_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, board.o(i.board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = board_init &rArr; uart_init &rArr; uart_pin_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
</UL>

<P><STRONG><a name="[c2]"></a>exNVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, hal_misc.o(i.exNVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = exNVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configure
</UL>

<P><STRONG><a name="[4b]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, zf_uart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[ab]"></a>get_angle</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, imu.o(i.get_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_angle &rArr; asinf &rArr; sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INS_task
</UL>

<P><STRONG><a name="[a6]"></a>get_icm20602_accdata_spi</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, seekfree_icm20602.o(i.get_icm20602_accdata_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_icm20602_accdata_spi &rArr; icm_spi_r_reg_bytes &rArr; spi_mosi
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_r_reg_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
</UL>

<P><STRONG><a name="[a7]"></a>get_icm20602_gyro_spi</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, seekfree_icm20602.o(i.get_icm20602_gyro_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = get_icm20602_gyro_spi &rArr; icm_spi_r_reg_bytes &rArr; spi_mosi
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_r_reg_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
</UL>

<P><STRONG><a name="[73]"></a>get_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, remote.o(i.get_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INS_task
</UL>

<P><STRONG><a name="[111]"></a>gpio_init</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, zf_gpio.o(i.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_init_IST
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
</UL>

<P><STRONG><a name="[10b]"></a>gps_data_parse</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gps.o(i.gps_data_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = gps_data_parse &rArr; gps_gnrmc_parse &rArr; get_float_number &rArr; str_to_double &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gngga_parse
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>icm20602_init_spi</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, seekfree_icm20602.o(i.icm20602_init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = icm20602_init_spi &rArr; spi_init &rArr; spi_pin_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_w_reg_byte
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_r_reg_byte
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_self3_check
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_INIT
</UL>

<P><STRONG><a name="[cd]"></a>int16_constrain</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, user.o(i.int16_constrain))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERVO_SET
</UL>

<P><STRONG><a name="[b4]"></a>invSqrt</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mahonyahrs.o(i.invSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = invSqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdateIMU
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdate
</UL>

<P><STRONG><a name="[116]"></a>ist8310_GPIO_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ist8310driver_middleware.o(i.ist8310_GPIO_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ist8310_GPIO_init &rArr; simiic_init_IST &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_init_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
</UL>

<P><STRONG><a name="[118]"></a>ist8310_IIC_read_muli_reg</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, ist8310driver_middleware.o(i.ist8310_IIC_read_muli_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ist8310_IIC_read_muli_reg &rArr; simiic_read_regs_IST &rArr; send_ch_IST &rArr; sccb_waitack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_regs_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_read_mag
</UL>

<P><STRONG><a name="[11a]"></a>ist8310_IIC_read_single_reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ist8310driver_middleware.o(i.ist8310_IIC_read_single_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ist8310_IIC_read_single_reg &rArr; simiic_read_reg_IST &rArr; send_ch_IST &rArr; sccb_waitack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_reg_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
</UL>

<P><STRONG><a name="[11c]"></a>ist8310_IIC_write_single_reg</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ist8310driver_middleware.o(i.ist8310_IIC_write_single_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ist8310_IIC_write_single_reg &rArr; simiic_write_reg_IST &rArr; send_ch_IST &rArr; sccb_waitack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_reg_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
</UL>

<P><STRONG><a name="[120]"></a>ist8310_com_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ist8310driver_middleware.o(i.ist8310_com_init))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
</UL>

<P><STRONG><a name="[11e]"></a>ist8310_delay_us</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ist8310driver_middleware.o(i.ist8310_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ist8310_delay_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_init
</UL>

<P><STRONG><a name="[9f]"></a>ist8310_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, ist8310driver.o(i.ist8310_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ist8310_init &rArr; ist8310_delay_us &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_delay_us
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_com_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_IIC_write_single_reg
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_IIC_read_single_reg
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_GPIO_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_INIT
</UL>

<P><STRONG><a name="[a8]"></a>ist8310_read_mag</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ist8310driver.o(i.ist8310_read_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ist8310_read_mag &rArr; ist8310_IIC_read_muli_reg &rArr; simiic_read_regs_IST &rArr; send_ch_IST &rArr; sccb_waitack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_IIC_read_muli_reg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_data_get
</UL>

<P><STRONG><a name="[121]"></a>lcd_clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, seekfree_18tft.o(i.lcd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_clear &rArr; lcd_set_region &rArr; __aeabi_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writedata_16bit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[124]"></a>lcd_init</STRONG> (Thumb, 716 bytes, Stack size 16 bytes, seekfree_18tft.o(i.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lcd_init &rArr; spi_init &rArr; spi_pin_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeIndex
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeData
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>lcd_showchar</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, seekfree_18tft.o(i.lcd_showchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lcd_showchar &rArr; lcd_set_region &rArr; __aeabi_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writedata_16bit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showstr
</UL>

<P><STRONG><a name="[7e]"></a>lcd_showstr</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, seekfree_18tft.o(i.lcd_showstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lcd_showstr &rArr; lcd_showchar &rArr; lcd_set_region &rArr; __aeabi_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showchar
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
</UL>

<P><STRONG><a name="[48]"></a>main</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = main &rArr; EEPROM_COLLECT &rArr; GET_MY_POSI &rArr; GET_POSI &rArr; GeodeticToCartesian &rArr; tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_parse
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track_INIT
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Track
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_INIT
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INIT
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_INIT
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[71]"></a>mt9v03x_dma</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, seekfree_mt9v03x.o(i.mt9v03x_dma))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>mt9v03x_uart_callback</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, seekfree_mt9v03x.o(i.mt9v03x_uart_callback))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>mt9v03x_vsync</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, seekfree_mt9v03x.o(i.mt9v03x_vsync))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>my_tan</STRONG> (Thumb, 312 bytes, Stack size 56 bytes, track.o(i.my_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = my_tan &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
</UL>

<P><STRONG><a name="[129]"></a>nvic_init</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, common.o(i.nvic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nvic_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_irq
</UL>

<P><STRONG><a name="[df]"></a>ov7725_cof_uart_interrupt</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, seekfree_uart_7725.o(i.ov7725_cof_uart_interrupt))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
</UL>

<P><STRONG><a name="[6f]"></a>ov7725_dma</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, seekfree_7725.o(i.ov7725_dma))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>ov7725_uart_dma</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, seekfree_uart_7725.o(i.ov7725_uart_dma))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>ov7725_uart_vsync</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, seekfree_uart_7725.o(i.ov7725_uart_vsync))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>ov7725_vsync</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, seekfree_7725.o(i.ov7725_vsync))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_DISTANCE
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
</UL>

<P><STRONG><a name="[8c]"></a>rad_format</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, track.o(i.rad_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rad_format &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_OFFSET
</UL>

<P><STRONG><a name="[de]"></a>remote_hander</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, remote.o(i.remote_hander))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = remote_hander &rArr; Remote_Byte_Get &rArr; Remote_Data_Analysis &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getchar
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Byte_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[82]"></a>simiic_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, seekfree_iic.o(i.simiic_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = simiic_init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_INIT
</UL>

<P><STRONG><a name="[117]"></a>simiic_init_IST</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ist8310_iic.o(i.simiic_init_IST))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = simiic_init_IST &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_GPIO_init
</UL>

<P><STRONG><a name="[11b]"></a>simiic_read_reg_IST</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ist8310_iic.o(i.simiic_read_reg_IST))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = simiic_read_reg_IST &rArr; send_ch_IST &rArr; sccb_waitack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_stop_IST
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_start_IST
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_IST
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_IIC_read_single_reg
</UL>

<P><STRONG><a name="[9b]"></a>simiic_read_regs</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, seekfree_iic.o(i.simiic_read_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = simiic_read_regs &rArr; send_ch &rArr; sccb_waitack
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
</UL>

<P><STRONG><a name="[119]"></a>simiic_read_regs_IST</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ist8310_iic.o(i.simiic_read_regs_IST))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = simiic_read_regs_IST &rArr; send_ch_IST &rArr; sccb_waitack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_stop_IST
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_start_IST
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_IST
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_IIC_read_muli_reg
</UL>

<P><STRONG><a name="[11d]"></a>simiic_write_reg_IST</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ist8310_iic.o(i.simiic_write_reg_IST))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = simiic_write_reg_IST &rArr; send_ch_IST &rArr; sccb_waitack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_stop_IST
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_start_IST
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_IIC_write_single_reg
</UL>

<P><STRONG><a name="[9d]"></a>simiic_write_regs</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, seekfree_iic.o(i.simiic_write_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = simiic_write_regs &rArr; send_ch &rArr; sccb_waitack
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_PageWrite
</UL>

<P><STRONG><a name="[99]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
</UL>

<P><STRONG><a name="[110]"></a>spi_init</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, zf_spi.o(i.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = spi_init &rArr; spi_pin_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
</UL>

<P><STRONG><a name="[115]"></a>spi_mosi</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, zf_spi.o(i.spi_mosi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_w_reg_byte
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_r_reg_bytes
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_r_reg_byte
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writedata_16bit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeIndex
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeData
</UL>

<P><STRONG><a name="[9a]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRSupdate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[fc]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[105]"></a>str_to_double</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, gps.o(i.str_to_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = str_to_double &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
</UL>

<P><STRONG><a name="[109]"></a>str_to_int</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, gps.o(i.str_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
</UL>

<P><STRONG><a name="[11f]"></a>systick_delay</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, zf_systick.o(i.systick_delay))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ist8310_delay_us
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
</UL>

<P><STRONG><a name="[76]"></a>systick_delay_ms</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, zf_systick.o(i.systick_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = systick_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INIT
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_COLLECT
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferWrite
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EE_BufferRead
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_GET_POSI
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_self3_check
</UL>

<P><STRONG><a name="[97]"></a>tan</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tan.o(i.tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tan &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
</UL>

<P><STRONG><a name="[96]"></a>trunc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, trunc.o(i.trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = trunc &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GeodeticToCartesian
</UL>

<P><STRONG><a name="[131]"></a>uart_getchar</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, zf_uart.o(i.uart_getchar))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remote_hander
</UL>

<P><STRONG><a name="[93]"></a>uart_init</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, zf_uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = uart_init &rArr; uart_pin_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INIT
</UL>

<P><STRONG><a name="[dd]"></a>uart_interrupt_handler</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, gps.o(i.uart_interrupt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_interrupt_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_query
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>uart_putbuff</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, zf_uart.o(i.uart_putbuff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_putbuff
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INIT
</UL>

<P><STRONG><a name="[13d]"></a>uart_query</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, zf_uart.o(i.uart_query))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_interrupt_handler
</UL>

<P><STRONG><a name="[95]"></a>uart_rx_irq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, zf_uart.o(i.uart_rx_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_rx_irq &rArr; nvic_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_init
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_INIT
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[12e]"></a>read_ch_IST</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ist8310_iic.o(i.read_ch_IST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_ch_IST &rArr; simiic_sendack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_sendack_IST
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_regs_IST
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_reg_IST
</UL>

<P><STRONG><a name="[133]"></a>sccb_waitack_IST</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ist8310_iic.o(i.sccb_waitack_IST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sccb_waitack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_IST
</UL>

<P><STRONG><a name="[135]"></a>send_ch_IST</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ist8310_iic.o(i.send_ch_IST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_ch_IST &rArr; sccb_waitack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay_IST
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sccb_waitack_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_reg_IST
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_regs_IST
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_reg_IST
</UL>

<P><STRONG><a name="[12f]"></a>simiic_delay_IST</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ist8310_iic.o(i.simiic_delay_IST))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_stop_IST
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_start_IST
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_sendack_IST
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch_IST
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sccb_waitack_IST
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch_IST
</UL>

<P><STRONG><a name="[130]"></a>simiic_sendack_IST</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ist8310_iic.o(i.simiic_sendack_IST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simiic_sendack_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch_IST
</UL>

<P><STRONG><a name="[136]"></a>simiic_start_IST</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ist8310_iic.o(i.simiic_start_IST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simiic_start_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_reg_IST
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_regs_IST
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_reg_IST
</UL>

<P><STRONG><a name="[137]"></a>simiic_stop_IST</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ist8310_iic.o(i.simiic_stop_IST))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simiic_stop_IST
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay_IST
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_reg_IST
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_regs_IST
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_reg_IST
</UL>

<P><STRONG><a name="[102]"></a>get_double_number</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gps.o(i.get_double_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = get_double_number &rArr; str_to_double &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_double
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
</UL>

<P><STRONG><a name="[106]"></a>get_float_number</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, gps.o(i.get_float_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_float_number &rArr; str_to_double &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_double
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gngga_parse
</UL>

<P><STRONG><a name="[108]"></a>get_int_number</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, gps.o(i.get_int_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_int_number &rArr; get_parameter_index
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_to_int
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gngga_parse
</UL>

<P><STRONG><a name="[103]"></a>get_parameter_index</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gps.o(i.get_parameter_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_parameter_index
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gngga_parse
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
</UL>

<P><STRONG><a name="[10e]"></a>gps_gngga_parse</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, gps.o(i.gps_gngga_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gps_gngga_parse &rArr; get_float_number &rArr; str_to_double &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_parse
</UL>

<P><STRONG><a name="[10d]"></a>gps_gnrmc_parse</STRONG> (Thumb, 690 bytes, Stack size 104 bytes, gps.o(i.gps_gnrmc_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = gps_gnrmc_parse &rArr; get_float_number &rArr; str_to_double &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utc_to_btc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_parameter_index
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_float_number
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_parse
</UL>

<P><STRONG><a name="[10f]"></a>utc_to_btc</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, gps.o(i.utc_to_btc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = utc_to_btc
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_gnrmc_parse
</UL>

<P><STRONG><a name="[d3]"></a>DELAY_xUs</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_mm32f327x.o(i.DELAY_xUs))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToXX
</UL>

<P><STRONG><a name="[d1]"></a>SetSysClock</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system_mm32f327x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SetSysClock &rArr; SetSysClockToXX &rArr; AutoCalPllFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockToXX
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d2]"></a>SetSysClockToXX</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, system_mm32f327x.o(i.SetSysClockToXX))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetSysClockToXX &rArr; AutoCalPllFactor
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoCalPllFactor
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_xUs
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[13a]"></a>spi_pin_init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, zf_spi.o(i.spi_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = spi_pin_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[13c]"></a>uart_pin_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, zf_uart.o(i.uart_pin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart_pin_init &rArr; afio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;afio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[122]"></a>lcd_set_region</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, seekfree_18tft.o(i.lcd_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_set_region &rArr; __aeabi_assert &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeIndex
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_writeData
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showchar
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[126]"></a>lcd_writeData</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, seekfree_18tft.o(i.lcd_writeData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_writeData &rArr; spi_mosi
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
</UL>

<P><STRONG><a name="[125]"></a>lcd_writeIndex</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, seekfree_18tft.o(i.lcd_writeIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lcd_writeIndex &rArr; spi_mosi
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_region
</UL>

<P><STRONG><a name="[123]"></a>lcd_writedata_16bit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, seekfree_18tft.o(i.lcd_writedata_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lcd_writedata_16bit &rArr; spi_mosi
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_showchar
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[112]"></a>icm20602_self3_check</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, seekfree_icm20602.o(i.icm20602_self3_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icm20602_self3_check &rArr; icm_spi_r_reg_byte &rArr; spi_mosi
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_delay_ms
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm_spi_r_reg_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
</UL>

<P><STRONG><a name="[114]"></a>icm_spi_r_reg_byte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, seekfree_icm20602.o(i.icm_spi_r_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icm_spi_r_reg_byte &rArr; spi_mosi
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_self3_check
</UL>

<P><STRONG><a name="[107]"></a>icm_spi_r_reg_bytes</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, seekfree_icm20602.o(i.icm_spi_r_reg_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icm_spi_r_reg_bytes &rArr; spi_mosi
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_gyro_spi
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_icm20602_accdata_spi
</UL>

<P><STRONG><a name="[113]"></a>icm_spi_w_reg_byte</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, seekfree_icm20602.o(i.icm_spi_w_reg_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icm_spi_w_reg_byte &rArr; spi_mosi
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_mosi
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20602_init_spi
</UL>

<P><STRONG><a name="[12b]"></a>read_ch</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, seekfree_iic.o(i.read_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_ch &rArr; simiic_sendack
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_sendack
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_regs
</UL>

<P><STRONG><a name="[132]"></a>sccb_waitack</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, seekfree_iic.o(i.sccb_waitack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sccb_waitack
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
</UL>

<P><STRONG><a name="[134]"></a>send_ch</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, seekfree_iic.o(i.send_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = send_ch &rArr; sccb_waitack
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sccb_waitack
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_regs
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_regs
</UL>

<P><STRONG><a name="[12c]"></a>simiic_delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, seekfree_iic.o(i.simiic_delay))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_start
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_sendack
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ch
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sccb_waitack
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
</UL>

<P><STRONG><a name="[12d]"></a>simiic_sendack</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, seekfree_iic.o(i.simiic_sendack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simiic_sendack
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_ch
</UL>

<P><STRONG><a name="[138]"></a>simiic_start</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, seekfree_iic.o(i.simiic_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simiic_start
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_regs
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_regs
</UL>

<P><STRONG><a name="[139]"></a>simiic_stop</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, seekfree_iic.o(i.simiic_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simiic_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_write_regs
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simiic_read_regs
</UL>

<P><STRONG><a name="[f7]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e2]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[f9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
